# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TaskReaderServiceModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TaskReaderServiceModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_task': 'int',
            'outputs': 'Outputs',
            'update_date': 'datetime'
        }

        self.attribute_map = {
            'id_task': 'IdTask',
            'outputs': 'Outputs',
            'update_date': 'UpdateDate'
        }

        self._id_task = None
        self._outputs = None
        self._update_date = None

    @property
    def id_task(self):
        """
        Gets the id_task of this TaskReaderServiceModel.


        :return: The id_task of this TaskReaderServiceModel.
        :rtype: int
        """
        return self._id_task

    @id_task.setter
    def id_task(self, id_task):
        """
        Sets the id_task of this TaskReaderServiceModel.


        :param id_task: The id_task of this TaskReaderServiceModel.
        :type: int
        """
        self._id_task = id_task

    @property
    def outputs(self):
        """
        Gets the outputs of this TaskReaderServiceModel.


        :return: The outputs of this TaskReaderServiceModel.
        :rtype: Outputs
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """
        Sets the outputs of this TaskReaderServiceModel.


        :param outputs: The outputs of this TaskReaderServiceModel.
        :type: Outputs
        """
        self._outputs = outputs

    @property
    def update_date(self):
        """
        Gets the update_date of this TaskReaderServiceModel.


        :return: The update_date of this TaskReaderServiceModel.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """
        Sets the update_date of this TaskReaderServiceModel.


        :param update_date: The update_date of this TaskReaderServiceModel.
        :type: datetime
        """
        self._update_date = update_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

