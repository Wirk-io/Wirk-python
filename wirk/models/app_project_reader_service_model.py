# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AppProjectReaderServiceModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AppProjectReaderServiceModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'app_name': 'str',
            'app_project_state': 'int',
            'creation_date': 'datetime',
            'credit': 'int',
            'has_instruction': 'bool',
            'has_question_options': 'bool',
            'id_app': 'int',
            'id_app_project': 'int',
            'id_quality': 'int',
            'instruction': 'str',
            'nb_task_closed': 'int',
            'nb_total_task': 'int',
            'qualities': 'list[QualityReaderServiceModel]',
            'quality_name': 'str',
            'question_options': 'list[str]',
            'title': 'str',
            'title_question_options': 'str',
            'url_notification': 'str'
        }

        self.attribute_map = {
            'app_name': 'AppName',
            'app_project_state': 'AppProjectState',
            'creation_date': 'CreationDate',
            'credit': 'Credit',
            'has_instruction': 'HasInstruction',
            'has_question_options': 'HasQuestionOptions',
            'id_app': 'IdApp',
            'id_app_project': 'IdAppProject',
            'id_quality': 'IdQuality',
            'instruction': 'Instruction',
            'nb_task_closed': 'NbTaskClosed',
            'nb_total_task': 'NbTotalTask',
            'qualities': 'Qualities',
            'quality_name': 'QualityName',
            'question_options': 'QuestionOptions',
            'title': 'Title',
            'title_question_options': 'TitleQuestionOptions',
            'url_notification': 'UrlNotification'
        }

        self._app_name = None
        self._app_project_state = None
        self._creation_date = None
        self._credit = None
        self._has_instruction = None
        self._has_question_options = None
        self._id_app = None
        self._id_app_project = None
        self._id_quality = None
        self._instruction = None
        self._nb_task_closed = None
        self._nb_total_task = None
        self._qualities = None
        self._quality_name = None
        self._question_options = None
        self._title = None
        self._title_question_options = None
        self._url_notification = None

    @property
    def app_name(self):
        """
        Gets the app_name of this AppProjectReaderServiceModel.


        :return: The app_name of this AppProjectReaderServiceModel.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """
        Sets the app_name of this AppProjectReaderServiceModel.


        :param app_name: The app_name of this AppProjectReaderServiceModel.
        :type: str
        """
        self._app_name = app_name

    @property
    def app_project_state(self):
        """
        Gets the app_project_state of this AppProjectReaderServiceModel.


        :return: The app_project_state of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._app_project_state

    @app_project_state.setter
    def app_project_state(self, app_project_state):
        """
        Sets the app_project_state of this AppProjectReaderServiceModel.


        :param app_project_state: The app_project_state of this AppProjectReaderServiceModel.
        :type: int
        """
        self._app_project_state = app_project_state

    @property
    def creation_date(self):
        """
        Gets the creation_date of this AppProjectReaderServiceModel.


        :return: The creation_date of this AppProjectReaderServiceModel.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this AppProjectReaderServiceModel.


        :param creation_date: The creation_date of this AppProjectReaderServiceModel.
        :type: datetime
        """
        self._creation_date = creation_date

    @property
    def credit(self):
        """
        Gets the credit of this AppProjectReaderServiceModel.


        :return: The credit of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """
        Sets the credit of this AppProjectReaderServiceModel.


        :param credit: The credit of this AppProjectReaderServiceModel.
        :type: int
        """
        self._credit = credit

    @property
    def has_instruction(self):
        """
        Gets the has_instruction of this AppProjectReaderServiceModel.


        :return: The has_instruction of this AppProjectReaderServiceModel.
        :rtype: bool
        """
        return self._has_instruction

    @has_instruction.setter
    def has_instruction(self, has_instruction):
        """
        Sets the has_instruction of this AppProjectReaderServiceModel.


        :param has_instruction: The has_instruction of this AppProjectReaderServiceModel.
        :type: bool
        """
        self._has_instruction = has_instruction

    @property
    def has_question_options(self):
        """
        Gets the has_question_options of this AppProjectReaderServiceModel.


        :return: The has_question_options of this AppProjectReaderServiceModel.
        :rtype: bool
        """
        return self._has_question_options

    @has_question_options.setter
    def has_question_options(self, has_question_options):
        """
        Sets the has_question_options of this AppProjectReaderServiceModel.


        :param has_question_options: The has_question_options of this AppProjectReaderServiceModel.
        :type: bool
        """
        self._has_question_options = has_question_options

    @property
    def id_app(self):
        """
        Gets the id_app of this AppProjectReaderServiceModel.


        :return: The id_app of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._id_app

    @id_app.setter
    def id_app(self, id_app):
        """
        Sets the id_app of this AppProjectReaderServiceModel.


        :param id_app: The id_app of this AppProjectReaderServiceModel.
        :type: int
        """
        self._id_app = id_app

    @property
    def id_app_project(self):
        """
        Gets the id_app_project of this AppProjectReaderServiceModel.


        :return: The id_app_project of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._id_app_project

    @id_app_project.setter
    def id_app_project(self, id_app_project):
        """
        Sets the id_app_project of this AppProjectReaderServiceModel.


        :param id_app_project: The id_app_project of this AppProjectReaderServiceModel.
        :type: int
        """
        self._id_app_project = id_app_project

    @property
    def id_quality(self):
        """
        Gets the id_quality of this AppProjectReaderServiceModel.


        :return: The id_quality of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._id_quality

    @id_quality.setter
    def id_quality(self, id_quality):
        """
        Sets the id_quality of this AppProjectReaderServiceModel.


        :param id_quality: The id_quality of this AppProjectReaderServiceModel.
        :type: int
        """
        self._id_quality = id_quality

    @property
    def instruction(self):
        """
        Gets the instruction of this AppProjectReaderServiceModel.


        :return: The instruction of this AppProjectReaderServiceModel.
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """
        Sets the instruction of this AppProjectReaderServiceModel.


        :param instruction: The instruction of this AppProjectReaderServiceModel.
        :type: str
        """
        self._instruction = instruction

    @property
    def nb_task_closed(self):
        """
        Gets the nb_task_closed of this AppProjectReaderServiceModel.


        :return: The nb_task_closed of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._nb_task_closed

    @nb_task_closed.setter
    def nb_task_closed(self, nb_task_closed):
        """
        Sets the nb_task_closed of this AppProjectReaderServiceModel.


        :param nb_task_closed: The nb_task_closed of this AppProjectReaderServiceModel.
        :type: int
        """
        self._nb_task_closed = nb_task_closed

    @property
    def nb_total_task(self):
        """
        Gets the nb_total_task of this AppProjectReaderServiceModel.


        :return: The nb_total_task of this AppProjectReaderServiceModel.
        :rtype: int
        """
        return self._nb_total_task

    @nb_total_task.setter
    def nb_total_task(self, nb_total_task):
        """
        Sets the nb_total_task of this AppProjectReaderServiceModel.


        :param nb_total_task: The nb_total_task of this AppProjectReaderServiceModel.
        :type: int
        """
        self._nb_total_task = nb_total_task

    @property
    def qualities(self):
        """
        Gets the qualities of this AppProjectReaderServiceModel.


        :return: The qualities of this AppProjectReaderServiceModel.
        :rtype: list[QualityReaderServiceModel]
        """
        return self._qualities

    @qualities.setter
    def qualities(self, qualities):
        """
        Sets the qualities of this AppProjectReaderServiceModel.


        :param qualities: The qualities of this AppProjectReaderServiceModel.
        :type: list[QualityReaderServiceModel]
        """
        self._qualities = qualities

    @property
    def quality_name(self):
        """
        Gets the quality_name of this AppProjectReaderServiceModel.


        :return: The quality_name of this AppProjectReaderServiceModel.
        :rtype: str
        """
        return self._quality_name

    @quality_name.setter
    def quality_name(self, quality_name):
        """
        Sets the quality_name of this AppProjectReaderServiceModel.


        :param quality_name: The quality_name of this AppProjectReaderServiceModel.
        :type: str
        """
        self._quality_name = quality_name

    @property
    def question_options(self):
        """
        Gets the question_options of this AppProjectReaderServiceModel.


        :return: The question_options of this AppProjectReaderServiceModel.
        :rtype: list[str]
        """
        return self._question_options

    @question_options.setter
    def question_options(self, question_options):
        """
        Sets the question_options of this AppProjectReaderServiceModel.


        :param question_options: The question_options of this AppProjectReaderServiceModel.
        :type: list[str]
        """
        self._question_options = question_options

    @property
    def title(self):
        """
        Gets the title of this AppProjectReaderServiceModel.


        :return: The title of this AppProjectReaderServiceModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AppProjectReaderServiceModel.


        :param title: The title of this AppProjectReaderServiceModel.
        :type: str
        """
        self._title = title

    @property
    def title_question_options(self):
        """
        Gets the title_question_options of this AppProjectReaderServiceModel.


        :return: The title_question_options of this AppProjectReaderServiceModel.
        :rtype: str
        """
        return self._title_question_options

    @title_question_options.setter
    def title_question_options(self, title_question_options):
        """
        Sets the title_question_options of this AppProjectReaderServiceModel.


        :param title_question_options: The title_question_options of this AppProjectReaderServiceModel.
        :type: str
        """
        self._title_question_options = title_question_options

    @property
    def url_notification(self):
        """
        Gets the url_notification of this AppProjectReaderServiceModel.


        :return: The url_notification of this AppProjectReaderServiceModel.
        :rtype: str
        """
        return self._url_notification

    @url_notification.setter
    def url_notification(self, url_notification):
        """
        Sets the url_notification of this AppProjectReaderServiceModel.


        :param url_notification: The url_notification of this AppProjectReaderServiceModel.
        :type: str
        """
        self._url_notification = url_notification

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

